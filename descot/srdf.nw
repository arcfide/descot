\input bnf 
\input eplain

\chapter{S-expression RDF Format}

\section{Informative Description}

SRDF is an s-expression based format for describing RDF Graphs.  It is 
meant to be mostly equivalent in its form to Turtle. Since the language 
is S-expression based, it is easier for Scheme and Lisp parsers to 
parse it. Parsers for other languages can also be written very 
easily. This makes it particularly nice for use in automated systems 
or in areas where S-expressions are the natural representation format. 

As a shortcut in this discussion, strings, booleans, numbers, and 
symbols are all assumed to be Scheme values of the same. Specifically, 
we assume that the reader will be able to read the special symbols 
[[&]], [[^]], [[=]], [[_]], and [[*]], as symbols directly 
from the input. 

SRDF forms are composed of a series of RDF triples and possibly, 
prefix definitions. Prefixes take the form 
[[(= name "uri")]], and associate a given Scheme 
symbol with a URI string. Otherwise, the form is an RDF triple or a set 
of triples. 

Normal triples are just a list of three elements, each a URI. However, 
it is possible to have a subject associated with more predicate 
and objects by replacing the list that would hold the single 
predicate and object with a list of such predicates and objects. 
Likewise, one can specify more objects to be associated with a 
given subject and predicate by doing the same thing with the 
object list, and replacing the [[cdr]] that would normally hold the 
object with a list of such objects. 

If the [[cadr]] of a predicate pair contains a list of objects, this 
represents a collection of objects, and is created in the same 
way that a turtle collection syntax is created: by associating 
a series of blank nodes with the right predicates with each of 
the objects listed. 

It is important to note the difference between an object that 
is a collection, and a list of objects that are each associated 
with the subject and predicate. The following is an instance of 
the former:

\medskip\verbatim
("subject-uri" "predicat-uri" 
  ("object1" "object2" ...))
|endverbatim
\medskip

\noindent Whereas the following is an instance of the latter:

\medskip\verbatim
("subject-uri" "predicate-uri"
  "object1"
  "object2"
  "object3")
|endverbatim
\medskip

Normal RDF triples take the form:

\medskip\verbatim
("subject-uri" "predicate-uri" "object-uri")
|endverbatim
\medskip

A blank node may be inlined into the graph by using a `*' as the 
begining symbol in an object context like so:

\medskip\verbatim
("subject" "pred" (* "pred" "object"))
|endverbatim
\medskip

Of course, blank nodes may have anything that is a valid predicate 
[[cdr]] as its [[cdr]], so the following is also valid:

\medskip\verbatim
("subject" "pred" (* ("pred1" "object1") ("pred2" "object2")))
|endverbatim
\medskip

URIs may be described by their full path names as strings, 
as prefix combined paths, or as blank node paths. The following 
are all valid URIs:

\medskip\verbatim
"http://some.domain/path/to#blah"
"blah"
(: prefix "blah")
(_ "uniqueid")
|endverbatim
\medskip

We use `:' for prefixes and `\_' for blank nodes. 

In addition to URIs, we also allow literals as valid [[car]]s for objects. 
Literals can be strings, numbers, booleans, or may be strings 
with either languages or types associated with them. The following 
are examples of languages and types, respectively:

\medskip\verbatim
($ "Language unspecified.")
(& "English Sentence lies here." en)
(^ "2008/01/03 14:00" (: xsd "date"))
|endverbatim
\medskip

\section{Formal BNF Grammar}

The following is a fairly formal BNF grammar with the exception of 
tokens such as strings, numbers, and booleans being undefined and 
presumed to be defined lexical values. Additionally, we define 
S-expression in terms of atoms and pairs, so the BNF grammar is 
also defined in the ``longhand'' notation for pairs and lists. 
This means that while the BNF Grammar states something 
like [[("subj" . ("pred" . ("obj" . ())))]] as the 
valid simplistic RDF triple, it is also legal in practice to use 
the shorthand version of this: [[("subj" "pred" "obj")]]. 

\begingroup\narrower
\begingrammar
%
<rdf sexp>:	<rdf triple> | <rdf triple> <rdf sexp>.\par

<rdf triple>:	"(" <uri> "." <rdf subject tail> ")" | "(" "=" name string ")".

<rdf subject tail: <rdf predicate> | <rdf predicate list> .

<rdf predicate list>: "()" | "(" <rdf predicate> "." <rdf predicate list> ")".

<rdf predicate>: "(" <uri> "." <rdf object list> ")".

<rdf object list>: "()" | "(" <rdf object> "." <rdf object list> ")".

<rdf object>: <uri> | <literal> 
	| <rdf object list> | <blank node list> .

<blank node list>: "(" "*" "." <rdf subject tail> ")".

<uri>: uri | "(" ":" "." <uri list> ")" | "(" "\_" name ")" .

<uri list>: "()" | "(" <uri name> "." <uri list> ")".

<uri name>: uri | name.

<literal>: "(" "\$" string ")" | number | boolean | 
	"(" "\&" string name ")" | "(" "\^{}" string <uri> ")".

\endgrammar
\endgroup
\endgroup

\section{Parsing}

<<Exports>>=
parse-srdf-file 
parse-srdf-form
@

Parsing an SRDF form requires that an RDF Graph be in place, together 
with some set of prefixes about which the parser knows.  Since the 
RDF Graph libraries available at the time%
\numberedfootnote{RDF List Graphs and Maps by Taylor Campbell}
all use a table/dictionary basis, and so are mutation based, we will 
also make our prefix form mutation based. We expect very few prefixes, 
and thus, a simple association list makes more sense than using 
hashtables. 

<<Parsing Types>>=
(define-record prefix-table (entries) ()
  ((constructor %make-prefix-table)))

(define prefix-table-set! 
  (lambda (tbl key value)
    (assert tbl prefix-table?)
    (let ([res (assq key (prefix-table-entries tbl))])
      (if res
	  (set-cdr! res value)
	  (set-prefix-table-entries! tbl
	    (cons (cons key value)
	      (prefix-table-entries tbl)))))))

(define prefix-table-ref
  (lambda (tbl key default)
    (assert tbl prefix-table?)
    (let ([res (assq key (prefix-table-entries tbl))])
      (if res (cdr res) default))))

(define make-prefix-table (lambda () (%make-prefix-table '())))
@

These forms require the use of [[assert]] so we import this:

<<Imports>>=
(import scheme)
(import assertions)
@

Given a Graph to work on and a set of Prefixes to use, then we 
can parse every SRDF set form by form, from the start to the end. 
This makes it easy to parse from a file directly, because we 
don't need to do any backtracking ourselves, and instead, we can 
rely on Scheme's built-in [[read]] to do most of the work for us. 

<<File Parsing>>=
(define parse-srdf-file
  (lambda (fname . maybe-graph)
    (let ([graph (if (null? maybe-graph) (make-rdf-graph) (car maybe-graph))]
	  [prefixes (make-prefix-table)])
      (iterate! (for srdf-form (in-file fname read))
	(parse-srdf-form graph prefixes srdf-form))
      graph)))
@

Of course, there is a problem with this. If there is an error 
in the parsing, we will not know where it is. There really is 
not anything we are going to do about this right now.

The above form uses nested foof looping, so we need to make 
sure that is an import; we also use RDF List Graphs to represent 
the RDF information for the moment, though we may have to 
move to something more effecient in the future:

<<Imports>>=
(import foof-loop)
(import nested-foof-loop)
(import rdf-list-graphs)
@

For each SRDF form, we will do a basic hard coding handle of 
each design, since this is easier than trying to abstract this 
on top of another parsing framework. We define [[parse-rdf-form]] 
as a generic procedure for handling all SRDF forms. 

\procsig{[[parse-srdf-form]]}{\var{graph} \var{prefixes} \var{form}}{}

Where {\it graph} and {\it prefixes} will be updated with the information 
stored in {\it form}. 

<<Generic Form Parsing>>=
(define parse-srdf-form
  (lambda (graph prefixes form)
    (case (car form)
      [(=) (prefix-table-set! prefixes (cadr form) (caddr form))]
      [else (parse-srdf-triple graph prefixes form)])))
@

An SRDF Triple is composed of a URI component and an RDF Subject Tail. 
These are parsed by [[parse-srdf-uri]] and [[parse-srdf-subj-tail]], 
respectively. Parsing a triple of this nature is sort of like parsing 
a Scheme [[let]] form in that the URI will then be the ``scoping'' for 
all of the tail. The signature of [[parse-srdf-triple]] is similar to 
[[parse-srdf-form]].

\procsig{[[parse-srdf-triple]]}{\var{graph} \var{prefixes} \var{form}}{}

<<Triple Parsing>>=
(define parse-srdf-triple
  (lambda (graph prefixes form)
    (parse-srdf-subj-tail graph prefixes 
      (parse-srdf-uri prefixes (car form))
      (cdr form))))
@

Parsing the RDF Subject Tail requires checking ahead a little bit to 
see whether the first element of the subject tail is a URI or not. 
If it is, then we can safely assume that we are dealing with a 
single subject tail with only one predicate, but otherwise, we have 
to assume that we are dealing with a predicate list. We are 
given the right URI to use as the subject.

\procsig{[[parse-srdf-subj-tail]]}
  {\var{graph} \var{prefixes} \var{subject uri} \var{subj tail form}}{}

<<Subject Tail Parsing>>=
(define parse-srdf-subj-tail
  (lambda (graph prefixes subject form)
    (if (valid-srdf-uri? (car form))
	(parse-srdf-predicate graph prefixes subject form)
	(for-each 
	  (lambda (t) 
	    (parse-srdf-predicate graph prefixes subject t))
	  form))))
@

Parsing an SRDF Predicate is just like parsing a normal triple in 
form, except that we receive the subject. We grab the predicate 
from the [[car]] and parse the tail, which we will handle the same 
way we handle the subject tail parsing.

\procsig{[[parse-srdf-predicate]]}
  {\var{graph} \var{prefixes} \var{subject-uri} \var{predicate-form}}{}

<<Predicate Parsing>>=
(define parse-srdf-predicate
  (lambda (graph prefixes subject form)
    (let ([predicate (parse-srdf-uri prefixes (car form))])
      (iterate! (for object (in-list (cdr form)))
	(parse-srdf-object graph prefixes subject predicate object)))))

(define parse-srdf-object
  (lambda (graph prefixes subject predicate object)
    (cond 
      [(valid-srdf-uri? object)
       (rdf-graph/add-triple! graph
	 (make-rdf-triple subject predicate 
	   (parse-srdf-uri prefixes object)))]
      [(valid-srdf-literal? object)
       (rdf-graph/add-triple! graph
	 (make-rdf-triple subject predicate 
	   (parse-srdf-literal prefixes object)))]
      [(valid-blank-node-list? object)
       (parse-srdf-subj-tail graph prefixes (generate-bnode) (cdr object))]
      [(valid-srdf-object-list? object)
       (parse-srdf-obj-collection graph prefixes subject predicate object)]
      [else (error 'parse-srdf-object "Invalid Object: ~s" object)])))
@

\subsection{Parsing Collections}

RDF collects are essentially linked lists where you have a nil object, 
a predicate for the [[cdr]], called [[rest]], and a predicate for the 
[[car]], called [[first]]. SRDF collections are objects which are 
object lists.

Firstly, we must define the three URIs used with Collections:

<<RDF URIs>>=
(define prefix-with-rdf
  (lambda (tail)
    (string-append "http://www.w3.org/1999/02/22-rdf-syntax-ns#" tail)))
(define rdf:nil (prefix-with-rdf "nil"))
(define rdf:rest (prefix-with-rdf "rest"))
(define rdf:first (prefix-with-rdf "first"))
(define rdf:List (prefix-with-rdf "List"))
(define rdf:type (prefix-with-rdf "type"))
@

After this, we will loop over every object in the collection, 
creating a series of blank nodes to match with the collection. 

<<Collection Parsing Procedures>>=
(define parse-srdf-obj-collection
  (lambda (graph prefixes subject predicate obj-list)
    (let ([fbn (generate-bnode)])
      (rdf-graph/add-triple! graph
	(make-rdf-triple subject predicate fbn))
      (loop ([for object rest (in-list obj-list)]
	     [with obn fbn bn]
	     [let bn (if (null? (cdr rest)) rdf:nil (generate-bnode))])
	(rdf-graph/add-triple! graph (make-rdf-triple obn rdf:type rdf:List))
	(parse-srdf-object graph prefixes obn rdf:first object)
	(rdf-graph/add-triple! graph (make-rdf-triple obn rdf:rest bn))))))
@

<<Collection Parsing>>=
<<RDF URIs>>

<<Collection Parsing Procedures>>
@

\subsection{Parsing URIs and Literals}

Parsing SRDF URIs does not require anything more than the prefix, 
and [[parse-srdf-uri]] should return a standard URI%
\numberedfootnote{We use Taylor Campbell's RDF URI implementation}. 

\procsig{[[parse-srdf-uri]]}{\var{prefixes} \var{uri form}}{\var{uri}}

<<URI Parsing>>=
(define parse-srdf-uri
  (lambda (prefixes uri)
    (if (pair? uri)
	(case (car uri)
	  [(:) (parse-srdf-uri-list prefixes (cdr uri))]
	  [(_) (make-rdf-bnode (symbol->string (cadr uri)))]
	  [else (error 'parse-srdf-uri "Invalid URI: ~a" uri)])
	uri)))

(define parse-srdf-uri-list
  (lambda (prefixes uri-list)
    (apply string-append
      (collect-list (for e (in-list uri-list))
	(if (string? e) e 
	    (or (prefix-table-ref prefixes e #f)
	      (error 'parse-srdf-uri "Invalid URI Tail: ~s" uri-list)))))))
@

The above requires the use of nested foof loop, as well as Taylor 
Campbell's RDF Library.  We should add the RDF module since this
is not already added:

<<Imports>>=
(import rdf)
@

Parsing a literal is a matter of checking its tag if it has one, or 
letting it through if it's a value such as a number or boolean.

<<Literal Parsing>>=
(define parse-srdf-literal
  (lambda (prefixes val)
    (cond
      [(number? val) (make-rdf-plain-literal (number->string val) #f)]
      [(boolean? val) (make-rdf-plain-literal (if val "true" "false") #f)]
      [(pair? val)
       (case (car val)
	 [($) (make-rdf-plain-literal (cadr val) #f)]
	 [(@) (make-rdf-plain-literal (cadr val) (symbol->string (caddr val)))]
	 [(^) 
	  (make-rdf-typed-literal (cadr val)
	    (parse-srdf-uri prefixes (caddr val)))]
	 [else (error 'parse-srdf-literal "Bad Tagged Literal: ~s" val)])]
      [else (error 'parse-srdf-literal "Unknown Literal: ~s" val)])))
@

\subsection{Blank Nodes}

We have to have a way of generating blank nodes that are going to be 
unique according to some metric of uniqueness.  In order to do this, 
we set up a parameter to hold a reasonable value from which to start, 
and then use [[current-time]] in order to get something pretty unqiue.

<<Generating Blank Nodes>>=
(define bnode-seed (make-parameter 1242083868))

(define generate-bnode
  (lambda ()
    (let ([ct (current-time)])
      (make-rdf-bnode 
	(string-append (symbol->string (gensym))
	  (number->string (- (time-second ct) (bnode-seed)))
	  "."
	  (number->string (time-nanosecond ct)))))))
@

\subsection{Validating elements}

We may want to validate a few different elements of an SRDF, 
which we deal with here.

<<Validating>>=
<<Validating URIs>>

<<Validating Literals>>

<<Validating Blank Node Lists>>

<<Validating Object Lists>>
@

If we want to validate URIs, we can use the following, which checks to 
make sure that we either have the right prefix or we have a string.

<<Validating URIs>>=
(define valid-srdf-uri?
  (lambda (uri)
    (or (string? uri)
	(and (pair? uri) (memq (car uri) '(: _)) #t))))
@

We can handle Literals by checking for their head tags or their
other types.

<<Validating Literals>>=
(define valid-srdf-literal?
  (lambda (obj)
    (or (number? obj) (boolean? obj)
      (and (pair? obj)
	(memq (car obj) '($ @ ^))
	#t))))
@

A blank node list is easy, since it is only a tagged subject tail:

<<Validating Blank Node Lists>>=
(define valid-blank-node-list? 
  (lambda (obj)
    (and (pair? obj) (eq? '* (car obj)))))
@

Validating an Object list is a little more involved, since we 
need some sense of what an object is, as well as the potential 
recursion which results. 

<<Validating Object Lists>>=
(define valid-srdf-object? 
  (lambda (obj)
    (or 
      (valid-srdf-uri? obj)
      (valid-srdf-literal? obj)
      (valid-blank-node-list? obj)
      (valid-srdf-object-list? obj))))

(define valid-srdf-object-list?
  (lambda (obj)
    (and (pair? obj) (andmap valid-srdf-object? obj))))
@

\section{Writing}

<<Exports>>=
write-rdf-triple->srdf
write-rdf-graph->srdf
write-rdf-triples->srdf
@

A [[write-srdf-triples]] procedure is provided to make it easy to 
print out graphs to SRDF format.  The format is the simplest form 
of SRDF triples, so it is not easy to read, but it does the job.

Firstly, one must know how to construct a string representation of 
a given node:

<<Writing>>=
(define render-rdf-node
  (lambda (node)
    (cond
      [(rdf-uri-ref? node) (rdf-uri-ref->string node)]
      [(rdf-plain-literal? node)
       (let ([lang-tag (rdf-plain-literal/language-tag node)])
	 (if lang-tag
	     `(@ ,(rdf-literal/lexical-form node) ,(string->symbol lang-tag))
	     `($ ,(rdf-literal/lexical-form node))))]
      [(rdf-bnode? node) `(_ ,(string->symbol (rdf-bnode/name node)))]
      [(rdf-typed-literal? node)
       `(^ ,(rdf-literal/lexical-form node)
           ,(rdf-typed-literal/datatype-uri node))]
      [else (error 'render-rdf-node "Bad node ~a" node)])))

@

In order to then write a triple, we simply apply this to all of 
our pieces in our triple. 

<<Writing>>=
(define write-rdf-triple->srdf
  (case-lambda 
    [(triple)
     (%write-rdf-triple triple (current-output-port))]
    [(triple port)
     (%write-rdf-triple triple port)]))

(define %write-rdf-triple
  (lambda (triple port)
    (format port "~s~n"
      `(,(render-rdf-node (rdf-triple/subject triple))
        ,(render-rdf-node (rdf-triple/predicate triple))
        ,(render-rdf-node (rdf-triple/object triple))))))

@

We can then apply this over lists of triples:

<<Writing>>=
(define write-rdf-triples->srdf
  (case-lambda
    [(triple)
     (%write-rdf-triple-list triple (current-output-port))]
    [(triple port)
     (%write-rdf-triple-list triple port)]))

(define %write-rdf-triple-list
  (lambda (triple-list port)
    (for-each (lambda (e) (write-rdf-triple->srdf e port)) triple-list)))

@

We use [[rdf-graph/for-each-triple]] to go through all of the 
nodes in a graph:

<<Writing>>=
(define write-rdf-graph->srdf
  (case-lambda
    [(graph)
     (%write-rdf-graph graph (current-output-port))]
    [(graph port)
     (%write-rdf-graph graph port)]))

(define %write-rdf-graph
  (lambda (graph port)
    (rdf-graph/for-each-triple graph
      (lambda (e) (write-rdf-triple->srdf e port)))))

@

\section{Module Form}

The Chez Scheme module form exports [[parse-srdf-form]] and 
[[parse-srdf-file]] under the module name [[srdf-parsing]].

<<srdf.ss>>=
<<License>>

(module srdf
  (<<Exports>>) 
  <<Imports>>

<<Parsing Types>>

<<URI Parsing>>

<<Literal Parsing>>

<<File Parsing>>

<<Generic Form Parsing>>

<<Triple Parsing>>

<<Subject Tail Parsing>>

<<Predicate Parsing>>

<<Collection Parsing>>

<<Validating>>

<<Generating Blank Nodes>>

<<Writing>>

)
@

\section{License}

This SRDF implementation is licensed under the ISC License to Aaron
Hsu.

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; S-expression RDF Format
;;; 
;;; Copyright (c) 2009 Aaron Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
@


