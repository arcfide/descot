\chapter{RDF Library Formatting in HTML}

Descot RDF programs can be converted into HTML representations in the 
form of SXML so that they can be incorporated directly into web pages. 
To do so, we rely on two procedures: [[library->html]] and 
[[library->short-html]].  [[library->html]] handles formatting a 
library in a full page format with all the information, and 
[[library->short-html]] will format a library with just the minimally 
relevant information optimized for listings.

This inteface is documented by the rdf2html.ss file, which is a 
module exporting the above procedures:

<<rdf2html.ss>>=
<<License>>

(module rdf2html
  (library->html library->short-html)

<<rdf2html imports>>

<<long library conversion>>

<<short library conversion>>

<<long library rendering>>

<<rendering a short library>>

<<summary line>>

<<default empty library rendering>>

<<render an archive download>>

<<rendering single file downloads>>

<<rendering CVS locations>>

<<generic location rendering>>

<<additional rendering procedures>>

)
@

\section{Rendering}

A full library description has fields defined for the title of the 
library, the primary name, a description, a list of alternative 
libraries, its homepage, the dependencies, alternative library 
names, the bindings that library exports, its license, authors, 
creation date, last modification date, maintainer, version, 
implementation, categories, copyright information, and its download 
and retrieval information. To render this information, we use 
a set of rendering procedures. At the moment, let's avoid doing the 
alternative libraries, exports, and imports.

There should also be a way to get to the literal RDF store description 
that is stored in some format. To do this, we put a left float 
containing a link to the actual location of the library.

<<long library rendering>>=
(define render-library
  (lambda (store name db)
    (render-wrap
      (render-left-float 
	(render-homepage 
	  (encode-library-id (render-rdf-object name))
	  "RDF"))
      (render-title (render-homepage (library-homepage db) (library-title db)))
      (render-names (library-names store db))
      (render-categories (library-categories store db))
      (render-description (library-description db))
      (render-table
	(render-row "Version" (render-rdf-object (library-version db)))
	(render-row "Implementation" 
	  (render-implementation (library-implementation store db)))
	(render-row
	  "Authors"
	  (fold-right (lambda (e s) (if (null? s) `(,e) `(,e ", " ,@s)))
	    '()
	    (map render-author
	      (library-authors store db))))
	(render-row "Maintainer"
	  (render-author (library-contact store db)))
	(render-row "Copyright"
	  (render-copyright (library-copyright store db)))
	(render-row "License"
	  (rdf-literal/lexical-form (library-license-name store db)))
	(render-row "Created On:" (render-time (library-created db)))
	(render-row "Last Modified On:" 
	  (render-time (library-modified db))))
      (render-download-info store (library-location store db)))))
@

If we are rendering only a short library, we only need to provide the 
author, title, list of names, and a description (which may be cut short). 
It is probably also good to provide some version information.

<<rendering a short library>>=
(define render-short-library
  (lambda (prefix store name db)
    (render-wrap
      (render-left-float (render-author (car (library-authors store db))))
      (render-title 
	(render-browse-id-link prefix name (library-title db)))
      (render-names (library-names store db))
      (render-description (library-description db))
      (render-summary store db))))
@

We would like the short description to have a small summary of most 
of the important information, such as version and implementation, 
so we implement this as a special line after the description.

<<summary line>>=
(define render-summary
  (lambda (store db)
    `(p (@ (class "lib_summary"))
       "Version " ,(render-rdf-object (library-version db))
       " for " ,(render-implementation (library-implementation store db))
       " via " ,(render-download-type (car (library-location store db)))
       ".")))
@

When [[library->html]] is called, it should be called with the 
Descot RDF Store and the name of the library to be converted to HTML. 
If the library is not found, a default rendering for non-existant 
libraries should be returned, otherwise, its value should be the 
result of rendering the library. 

<<default empty library rendering>>=
(define render-no-library
  (lambda (name)
    (render-wrap
      (render-title "Sorry!")
      `(p "Library " ,name " does not exist."))))
@

Finally, we can define [[library->html]] and [[libary->short-html]].
In [[library->html]] we expect to receive the RDF Store along with 
the library name.

<<long library conversion>>=
(define library->html
  (lambda (rdf-store library-name)
    (let ([db (make-filled-rdf-predicate-map rdf-store library-name)])
      (if (zero? (rdf-predicate-map/size db))
	  (render-no-library library-name)
	  (render-library rdf-store library-name db)))))
@

In [[library->short-html]] we expect to get a path prefix for the 
browsing id, which we prepend to the library id to get a URL pointing 
to the actual long description of the library.  This would usually 
be something like ``http://descot.sacrideo.us/db/browse?id=''. 
Other than this, the interface is the same as [[library->html]].

<<short library conversion>>=
(define library->short-html
  (lambda (browse-id-prefix rdf-store library-name)
    (let ([db (make-filled-rdf-predicate-map rdf-store library-name)])
      (if (zero? (rdf-predicate-map/size db))
	  (render-no-library library-name)
	  (render-short-library browse-id-prefix rdf-store library-name db)))))
@

We now need to define all of our supporting rendering procedures.

<<additional rendering procedures>>=
(define render-wrap (lambda elems `(div ,@elems)))
(define render-title (lambda (title) `(h3 ,(render-rdf-object title))))
(define render-description (lambda (text) `(p ,(render-rdf-object text))))
(define render-table (lambda rows `(table ,@rows)))
(define render-row (lambda cols `(tr ,@(map render-column cols))))
(define render-header-row (lambda cols `(tr ,@(map render-head cols))))
(define render-column (lambda (column) `(td ,column)))
(define render-head (lambda (column) `(th ,column)))

(define render-names 
  (lambda (names)
    `(p (@ (class "library_names"))
       ,(fold-right (lambda (e s) (if s `(,e ", " ,@s) `(,e))) 
	 #f 
	 (map rdf-literal/lexical-form names)))))

(define render-list 
  (lambda (type attrs elems) 
    `(,type (@ ,@attrs) ,@(map (lambda (e) `(li ,e)) elems))))

(define render-author
  (lambda (author)
    (let ([email (rdf-literal/lexical-form (car author))] 
	  [name (rdf-literal/lexical-form (cdr author))])
      (or (and name email `(a (@ (href ,(make-email-href email))) ,name))
	  (and email `(a (@ (href ,(make-email-href email))) ,email))
	  name
	  ""))))

(define make-email-href
  (lambda (email)
    (string-append "mailto:" email)))

(define render-browse-id-link
  (lambda (prefix url txt)
    (render-homepage 
      (let ([encoding (encode-library-id (render-rdf-object url))])
	(if (pair? encoding)
	    (apply string-append (cons prefix encoding))
	    (string-append prefix encoding)))
      txt)))

(define encode-library-id
  (make-char-quotator '((#\# . "%23"))))

(define render-homepage 
  (lambda (url txt)
    (if url
        `(a (@ (href ,(render-rdf-object url))) ,(render-rdf-object txt))
	(render-rdf-object txt))))

(define render-copyright
  (lambda (fields)
    (let ([year (car fields)]
	  [author (cdr fields)])
      `(,(rdf-literal/lexical-form year) ,(render-author author)))))

(define render-time
  (lambda (obj)
    (rdf-literal/lexical-form obj)))

(define render-left-float
  (lambda elems
    `(div (@ (class "left_box")) ,@elems)))

(define render-rdf-object
  (lambda (obj)
    (cond
      [(pair? obj) obj]
      [(string? obj) obj]
      [(rdf-literal? obj) (rdf-literal/lexical-form obj)]
      [else ""])))

(define render-implementation
  (lambda (impl)
    (render-homepage (cdr impl) (car impl))))

(define render-categories
  (lambda (cats)
    `(p (@ (class "categories")) "Categories: " 
       ,@(fold-right 
	   (lambda (e s) 
	     (let ([ne (capitalize-string (render-rdf-object e))])
	       (if s `(,ne ", " ,@s) `(,ne))))
	   #f 
	   cats))))

(define render-download-type
  (lambda (type)
    (case type
      [(cvs) "CVS"]
      [(archive) "Archive"]
      [(single) "a single Scheme file"]
      [else "Unknown means"])))
@

\section{Rendering Locations and Download Information}

When a library instance is examined, it will have information on 
how to download it. There are three main distribution methods 
used by the average library distributor: source repository, 
archive, or single file.  That is, either the library is contained 
in a single file, some sort of archive file, or it is available 
through some source controll mechanism like CVS. 

Rendering a single file is easy to do, since the dscts:location
predicate will have an object pointing to a node that is itself 
the URL for the download.  Additionally, the one sentence that 
will be associated with that node is the type field indicating 
that the node is a Single File download node.  Easy to render.

<<rendering single file downloads>>=
(define render-single-file-location
  (lambda (node)
    `(p 
       "This library is distributed as a single, self-contained "
       ,(render-homepage node "Scheme File")
       ".")))
@

Rendering an archive really isn't that much more difficult:

<<render an archive download>>=
(define render-archive-location
  (lambda (node)
    `(p
       "This library is distributed as an "
       ,(render-homepage node "archive")
       ".")))
@

Rendering source control is a little harder, but should be done 
extensibly.  In the simple case, we can handle special cases 
like CVS, where the only important things are the CVSROOT and Module 
names, [TODO] though it would be nice to have the command for 
downloading right there:

<<rendering CVS locations>>=
(define render-cvs-location
  (lambda (root module)
    `((p "This library is distributed using CVS.")
      ,(render-table
         (render-header-row "CVSROOT" "Module")
         (render-row 
	   (render-rdf-object root) 
	   (render-rdf-object module))))))
@

Once we have these specialized procedures, we can dispatch on the 
type of the location node.

<<generic location rendering>>=
(define render-download-info
  (lambda (store info)
    (case (car info)
      [(single) (render-single-file-location (cdr info))]
      [(archive) (render-archive-location (cdr info))]
      [(cvs) (render-cvs-location (cadr info) (cddr info))]
      [else '()])))
@

\section{Imports}

rdf2html requires the following imports for Chez Scheme Version 7.4:

<<rdf2html imports>>=
(import scheme)
(import rdf-list-graphs)
(import rdf)
(import rdf-maps)
(import foof-loop)
(import nested-foof-loop)
(import descot-rdf-utilities)
(import oleg-util)
@

\section{Licensing}

This file is licensed under an ISC License:

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Parse RDF Collections to make a web hierarchy
;;; 
;;; Copyright (c) 2009 Aaron Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
