\chapter {Utilities for Handling Descot RDF Stores}

The module [[descot-rdf-utilities]] allows for a common place to define
utilites for handling Descot RDF Stores, which include things like accessing 
fields and objects of predicates relating to libraries, like record 
accessors, making it much easier to get to the library data, as well 
as defining some basic constant URIs that are used everywhere.

\section{URI Constants}

[[descot-rdf-utilities]] defines a number of URI constants to reference 
already defined URIs for Descot Stores.

<<descot uris>>=
(define dscts 
  (lambda (tail)
    (string-append "http://descot.sacrideo.us/10-rdf-schema#" tail)))
(define dscts:name (dscts "name"))
(define dscts:names (dscts "names"))
(define dscts:desc (dscts "desc"))
(define dscts:homepage (dscts "homepage"))
(define dscts:authors (dscts "authors"))
(define dscts:email (dscts "email"))
(define dscts:license (dscts "license"))
(define dscts:categories (dscts "categories"))
(define dscts:contact (dscts "contact"))
(define dscts:Library (dscts "Library"))
(define dscts:copyright (dscts "copyright"))
(define dscts:copyright-type (dscts "Copyright"))
(define dscts:copyright-year (dscts "copyright-year"))
(define dscts:copyright-owner (dscts "copyright-owner"))
(define dscts:modified (dscts "modified"))
(define dscts:creation (dscts "creation"))
(define dscts:version (dscts "version"))
(define dscts:implementation (dscts "implementation"))
(define dscts:location (dscts "location"))
(define dscts:Single-file (dscts "Single-file"))
(define dscts:Archive (dscts "Archive"))
(define dscts:CVS (dscts "CVS"))
(define dscts:cvs-root (dscts "cvs-root"))
(define dscts:cvs-module (dscts "cvs-module"))
@

There are also some standard RDF URIs that are commonly used with 
Descot Stores.  These are defined here as well.

<<rdf uris>>=
(define rdfs
  (lambda (tail)
    (string-append "http://www.w3.org/2000/01/rdf-schema#" tail)))
(define prefix-with-rdf
  (lambda (tail)
    (string-append "http://www.w3.org/1999/02/22-rdf-syntax-ns#" tail)))
(define rdf:nil (prefix-with-rdf "nil"))
(define rdf:rest (prefix-with-rdf "rest"))
(define rdf:first (prefix-with-rdf "first"))
(define rdf:Type (prefix-with-rdf "type"))
@

\section{Looping over RDF Lists}

One nice ability is to automatically loop over RDF Lists defined with 
the standard nested RDF List nodes.  This is accomplished with the 
help of foof loop, which allows for the extension of its looping macros 
to handle other constructs such as RDF Lists. 

Looping is accomplished as a standard FOR iterator in foof loop, 
where the iterator is given a store and a node as its starting place.

{\narrower
  [[(for elem rest (in-rdf-list store start-node))]]}

<<in-rdf-list iterator>>=
(define-syntax in-rdf-list 
  (lambda (x)
    (syntax-case x ()
      [(_ (element-variable pair-variable) (rdf-store list-node) next . rest)
       (and (identifier? #'element-variable) (identifier? #'pair-variable))
       #'(next 
	   ([(rdf-pair) 
	     (rdf-graph/triples-by-subject rdf-store list-node)])
	   ([pair-variable rdf-pair 
	      (if (rdf-object=? rdf:nil rdf-rest) 
		  #f
		  (rdf-graph/triples-by-subject rdf-store rdf-rest))])
	   ()
	   [(not pair-variable)]
	   ([(element-variable)
	     (find-rdf-object-by-predicate pair-variable rdf:first)]
	    [(rdf-rest) (find-rdf-object-by-predicate pair-variable rdf:rest)])
	   () 
	   . rest)]
      [(_ (element-variable) (rdf-store list-node) next . rest)
       (identifier? #'element-variable)
       #'(in-rdf-list (element-variable pair) 
	   (rdf-store list-node) 
	   next . rest)])))
@

\section{Finding over Lists of Triples}

It is convenient, given a list of RDF Triples, to search for a single 
RDF Triple.  This can be done using [[find]] but is inconvenient because 
of the constant higher-order procedures that have to be written to handle 
the RDF comparisons.  [[descot-rdf-utilities]] defines a couple convenience 
functions for handling these things more easily.

[[find-by-predicate]] searches a list of RDF Triples for a matching 
triple based on common predicates.

<<find-by-predicate>>=
(define find-rdf-predicate
  (lambda (lst pred)
    (find (lambda (e) (rdf-predicate=? (rdf-triple/predicate e) pred)) lst)))
@

[[find-rdf-object-by-predicate]] extends [[find-by-predicate]] to the 
special case where one just requires the object of the RDF Triple.

<<find-rdf-object-by-predicate>>=
(define find-rdf-object-by-predicate
  (lambda (lst predicate)
    (let ([res (find-rdf-predicate lst predicate)])
      (and res (rdf-triple/object res)))))
@

\section{Parsing Turtle Files}

While Taylor Campbell's RDF Parsers are fairly easy to use, it makes sense 
to simplify the process of parsing by encapsulating the needed code into 
a single procedure that only takes a filename of the rdf-store in 
turtle format to work.

<<parse-turtle-file>>=
(define parse-turtle-file
  (lambda (fname . maybe-graph)
    (parse-file turtle-parser:document fname
      (make-turtle-parser-context
        (lambda (triple graph)
	  (rdf-graph/add-triple! graph triple)
	  graph)
	(if (null? maybe-graph) (make-rdf-graph) (car maybe-graph)))
      (lambda (graph context stream) graph)
      (lambda (perror context stream)
        (error 'parse-turtle-file 
	  "Parse Error at ~a: ~{ ~s~}~%"
	  (parse-error/position perror)
	  (parse-error/messages perror))))))
@

\section{Handling Categories}

Categories are a special case field because it is used to group libraries 
into a tree where there would otherwise be no organization.  This is a 
common thing to do with packaging systems, and matches what users 
expect.  However, RDF Stores don't always have this information so 
readily available, so we have to make some procedures to help.

Firstly, it is useful to know all the categories that exist in a store. 

<<store categories>>=
(define store-categories
  (lambda (store)
    (remove-duplicate-categories
      (collect-list 
	(for category-list 
	     (in-list (rdf-graph/triples-by-predicate store dscts:categories)))
	  (for category (in-rdf-list store (rdf-triple/object category-list)))
	(rdf-literal/lexical-form category)))))
@

Secondly, we would like to find out which libraries have a given category.

<<libraries in category>>=
(define libraries-in-category
  (lambda (category)
    (collect-list 
      (for lib-triple 
	(in-list 
	  (rdf-graph/triples-by-predicate (current-store) dscts:categories)))
      (if (has-category? category (rdf-triple/object lib-triple)))
      (rdf-triple/subject lib-triple))))
@

[[libraries-in-category]] requires a filter to determine whether a 
library has a given category.  This serves a similar purpose to 
things like [[memq]].

<<has category>>=
(define has-category?
  (lambda (category rdf-category-list)
    (collect-or (for cat (in-rdf-list (current-store) rdf-category-list))
      (string=? category (rdf-literal/lexical-form cat)))))
@

It is also nice to get the list of categories for a library.

<<library's categories>>=
(define library-categories
  (lambda (store db)
    (collect-list 
      (for category 
	(in-rdf-list store 
	  (rdf-predicate-map/lookup db dscts:categories rdf:nil)))
      category)))
@

\section{Making RDF Predicate Maps}

[[rdf-maps]] provides for a type of RDF Predicate Map which is a 
table/dictionary keyed on RDF Predicates.  This is nice, but unfortunately, 
there is no way to get this from the normal RDF Graph interface, so 
we have to do this on our own.  This is a bit of a hack, but until 
the interface is made better, there probably isn't much that I can do.

<<make rdf predicate map>>=
(define make-filled-rdf-predicate-map
  (lambda (store name)
    (let ([db (make-rdf-predicate-map)])
      (rdf-graph/for-each-triple-by-subject store name
	(lambda (triple)
	  (rdf-predicate-map/insert! db (rdf-triple/predicate triple)
	    (rdf-triple/object triple))))
      db)))
@

\section{RDF Node to String Conversion}

Why isn't there a generalized string converter for RDF Triples?  I do 
not know, but at least we can get something working on our own.

<<rdf node to string>>=
(define rdf-node->string
  (lambda (node)
    (cond
      [(rdf-uri-ref? node) (rdf-uri-ref->string node)]
      [(rdf-bnode? node) (string-append "_:" (rdf-bnode/name node))]
      [(rdf-literal? node) (rdf-literal/lexical-form node)]
      [else (error 'rdf-node->string "Unknown type: ~s" node)])))
@

\section{RDF Library Accessors}

[[descot-rdf-utilities]] also defines a series of library accessors 
for getting at the fields of an RDF Library node and transforming 
them into something useful.

<<RDF Library Accessors>>=
(define library-ids
  (lambda (store)
    (map rdf-triple/subject
      (filter 
	(lambda (triple) 
	  (rdf-predicate=? rdf:Type (rdf-triple/predicate triple)))
	(rdf-graph/triples-by-object store dscts:Library)))))

(define library-title
  (lambda (db)
    (rdf-predicate-map/lookup db dscts:name #f)))

(define library-names
  (lambda (store db)
    (collect-list 
      (for elem 
	(in-rdf-list store (rdf-predicate-map/lookup db dscts:names rdf:nil)))
      elem)))

(define library-description
  (lambda (db) 
    (rdf-predicate-map/lookup db dscts:desc #f)))

(define library-copyright
  (lambda (store db)
    (let ([year (rdf-predicate-map/lookup db dscts:copyright-year #f)]
	  [owner (rdf-predicate-map/lookup db dscts:copyright-owner #f)])
      (or (and year owner `(,year ,@(make-author-pair store owner))) 
	  '()))))

(define library-homepage
  (lambda (db)
    (rdf-predicate-map/lookup db dscts:homepage #f)))

(define library-license-name
  (lambda (store db)
    (let ([res (rdf-predicate-map/lookup db dscts:license #f)])
      (if res
	  (find-rdf-object-by-predicate
	    (rdf-graph/triples-by-subject store res)
	    dscts:name)
	  (make-rdf-plain-literal "Unknown" #f)))))

(define library-authors
  (lambda (store db)
    (collect-list 
      (for author 
	(in-rdf-list store 
	  (rdf-predicate-map/lookup db dscts:authors rdf:nil)))
      (make-author-pair store author))))

(define make-author-pair
  (lambda (store author)
    (let ([triples (rdf-graph/triples-by-subject store author)])
      (cons (author-email triples) (author-name triples)))))

(define author-email
  (lambda (triples-list)
    (find-rdf-object-by-predicate triples-list dscts:email)))

(define author-name
  (lambda (triples-list)
    (find-rdf-object-by-predicate triples-list dscts:name)))

(define library-contact
  (lambda (store db)
    (let ([res (rdf-predicate-map/lookup db dscts:contact #f)])
      (if res
	  (make-author-pair store res)
	  (error 'library-contact "Maintainer should not be empty.")))))

(define library-created
  (lambda (db)
    (rdf-predicate-map/lookup db dscts:creation #f)))

(define library-modified
  (lambda (db)
    (rdf-predicate-map/lookup db dscts:modified #f)))

(define library-version
  (lambda (db)
    (rdf-predicate-map/lookup db dscts:version #f)))

(define library-implementation
  (lambda (store db)
    (let* ([impl-node (rdf-predicate-map/lookup db dscts:implementation #f)]
	   [impl-list (rdf-graph/triples-by-subject store impl-node)])
    (cons 
      (find-rdf-object-by-predicate impl-list dscts:name)
      (find-rdf-object-by-predicate impl-list  dscts:homepage)))))

(define library-location
  (lambda (store db)
    (let ([node (rdf-predicate-map/lookup db dscts:location #f)])
      (if node
          (let* ([location-info (rdf-graph/triples-by-subject store node)]
		 [type (find-rdf-object-by-predicate location-info rdf:Type)])
	    (cond
	      [(rdf-object=? type dscts:Single-file) (cons 'single node)]
	      [(rdf-object=? type dscts:Archive) (cons 'archive node)]
	      [(rdf-object=? type dscts:CVS)
	       (cons 'cvs
		 (cons 
		   (find-rdf-object-by-predicate location-info dscts:cvs-root)
		   (find-rdf-object-by-predicate location-info 
		     dscts:cvs-module)))]))
	  '(unknown)))))
@

\section{Module Declaration}

[[descot-rdf-utilities]] is a module declared thus:

<<rdf-util.ss>>=
<<License>>

(module descot-rdf-utilities
  (dscts dscts:name dscts:desc dscts:homepage dscts:authors dscts:email
   dscts:license dscts:categories dscts:contact dscts:Library dscts:version
   dscts:copyright dscts:copyright-type dscts:copyright-owner
   dscts:copyright-year dscts:implementation dscts:location dscts:modified
   dscts:Single-file dscts:Archive dscts:CVS
   rdfs prefix-with-rdf rdf:nil rdf:rest rdf:first rdf:Type
   store-categories
   (in-rdf-list rdf-graph/triples-by-subject rdf-object=?
		find-rdf-object-by-predicate)
   find-rdf-predicate find-rdf-object-by-predicate
   parse-turtle-file
   libraries-in-category
   rdf-node->string
   library-ids library-names 
   make-filled-rdf-predicate-map
   library-title library-description library-homepage library-copyright
   library-authors library-license-name library-created library-modified
   library-contact library-version library-implementation
   library-location library-categories)

<<imports>>

<<rdf uris>>

<<descot uris>>

<<parse-turtle-file>>

<<in-rdf-list iterator>>

<<libraries in category>>

<<store categories>>

<<has category>>

<<make rdf predicate map>>

<<rdf node to string>>

<<find-rdf-object-by-predicate>>

<<find-by-predicate>>

<<RDF Library Accessors>>

<<library's categories>>

)
@

\section{Imports}

The following imports are expected from Aaron Hsu's Chez Scheme 
Libraries for Chez Scheme Version 7.4.

<<imports>>=
(import scheme)
(import rdf-list-graphs)
(import rdf)
(import rdf-maps)
(import text-parser-combinators)
(import rdf-turtle-parser)
(import parse-errors)
(import foof-loop)
(import nested-foof-loop)
@

\section{Licensing}

[[descot-rdf-utilities]] is licensed under an ISC License.

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Utilities for handling Descot RDFs
;;; 
;;; Copyright (c) 2009 Aaron Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
