\title{MIME Message Parsing}

\chapter{Introduction}%
MIME messages are mostly compatible with RFC 2822 messages, but they
define new headers and a new means of processing the body. This library is
designed to extend the RFC 2822 parsers defined in [[(arcfide rfc2822)]]
and provide the ability to parse messages that could potentially contain
MIME data.

MIME handling is also convenient for handling things that are
not messages, such as the body of POST HTTP transmissions.  These
transmissions send out a MIME body type of [[multipart/form-data]]
and ought to be parsed by a real MIME parser.

\chapter{Basic Imports}%
These are basic imports that nearly all of the other chapters 
require.

<<Imports>>=
(rnrs base)
(riastradh parscheme)
(rnrs records syntactic)
(arcfide parser-util)
@

\chapter{Convenient Parsing of Files, Ports, and Strings}%
These procedures provide nice conveniences for the most common usages 
of parsing MIME entities.

<<Exports>>=
parse-mime-entity parse-mime-contents
@

<<Convenience Procedures>>=
(define parse-mime-entity
	(make-generic-parser mime-parser:entity rfc2822-transcoder))
(define (parse-mime-contents params contents)
	((make-generic-parser (mime-parser:contents params) rfc2822-transcoder)
	 contents))

@

\chapter{Parsing MIME Entities}%
MIME entities are either messages or parts of a composite message. 
They look like regular messages, but may not have the entire 
set of headers that a regular message would have. The parser 
should return a [[mime-entity]].

Generally, a [[mime-entity]] should contain fields like a message,
as well as either a string or a bytevector for the contents. If the
contents fit naturally into a string format, such as textual data, then
strings should be used. If however, the media type of the contents of
an entity are binary or non-textual data, a bytevector should be used.

<<Exports>>=
mime-parser:entity mime-entity-fields mime-entity-contents
@

<<Datatypes>>=
(define-record-type mime-entity (fields fields contents))
@

<<Imports>>=
(arcfide rfc2822)
@

<<Entities>>=
<<Datatypes>>

<<Fields>>

<<Content Parsing>>

(define-parser mime-parser:entity
	(*parser 
			[fields mime-parser:fields]
			[contents (mime-parser:contents fields)]
		(parser:return
			(make-mime-entity fields contents))))
@

\chapter{Parsing MIME Fields}%
MIME fields are nearly identifical to RFC2822 fields, except that with a
MIME entity, fields other than "Content-" fields can be entirely ignored,
and may be dropped. This is not true for messages, however, and probably
only occurs in entities that are part of multipart entities.

<<Fields>>=
<<Headers>>

(define-parser mime-parser:fields
	(parser:list:repeated
		(parser:deep-choice
			mime-parser:content
			mime-parser:encoding
			mime-parser:id
			mime-parser:description
			mime-parser:version
			rfc2822-parser:field)))
@

Notice that we simplify the MIME definitions a bit by mixing together
entities, messages, and parts, which the MIME standard (RFC 2045)
distinguishes.

\chapter{MIME Header Definitions}

\section{Content Header}%
Specifies the Content-Type of a MIME entity.

<<Exports>>=
make-mime-type mime-type-main mime-type-subtype mime-type-parameters
@

<<Datatypes>>=
(define-record-type mime-type (fields main subtype parameters))
@

<<Exports>>=
mime-parser:content-value mime-parser:parameter-list
@

<<Headers>>=
(define-parser mime-parser:content
	(parser:rfc2822-header 'content-type "Content-Type"
		mime-parser:content-value))

(define-parser mime-parser:parameter-list
	(parser:list:repeated
		(parser:sequence (parser:char= #\;)
			(parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:parameter))))

(define-parser mime-parser:content-value
	(*parser
			[type (parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:token)]
			[(parser:char= #\/)]
			[subtype (parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:token)]
			[params mime-parser:parameter-list]
		(parser:return 
			(make-mime-type 
				(string->symbol (string-downcase type)) 
				(string->symbol (string-downcase subtype))
				params))))

@

Tokens are case-insensitive elements of a MIME type. We achieve this 
by downcasing all strings and converting them to symbols. 

<<Imports>>=
(srfi :14)
(rnrs unicode)
@

<<Headers>>=
(define-parser mime-parser:token
	(*parser
			[val (parser:string:at-least 1 mime-parser:token-char)]
		(parser:return val)))

(define-parser mime-parser:token-char
	(parser:char-in-set 
		(char-set-difference char-set:ascii
			char-set:whitespace
			char-set:iso-control
			(char-set 
				#\( #\) #\< #\> #\@ #\, #\; #\: #\\ #\" #\/
				#\[ #\] #\? #\=))))

@

Parameters are tokens followed by a value string separated by an [[=]] 
character.

<<Headers>>=
(define-parser mime-parser:parameter
	(*parser 
			[attr mime-parser:token]
			[(parser:single-bracketed rfc2822-parser:cfws-opt (parser:char= #\=))]
			[val (parser:choice rfc2822-parser:quoted-string mime-parser:token)]
		(parser:return (cons (string->symbol (string-downcase attr)) val))))

@

\subsection{Display MIME Types}%
It is useful to be able to render MIME types back into their canonical 
string form.

<<Exports>>=
mime-type->string
@

<<Convenience Procedures>>=
(define (mime-type->string type)
	(call-with-string-output-port
		(lambda (p)
			(put-datum p (mime-type-main type))
			(put-char p #\/)
			(put-datum p (mime-type-subtype type))
			(for-each
				(lambda (param)
					(put-string p "; ")
					(put-datum p (car param))
					(put-char p #\=)
					(put-datum p (cdr param)))
				(mime-type-parameters type)))))
@

\section{Encoding Header}%
Encoding specifies the method of storing the data that is in the entity.

<<Headers>>=
(define-parser mime-parser:encoding
	(parser:rfc2822-header 'content-transfer-encoding "Content-Transfer-Encoding"
		(*parser 
				[val (parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:token)]
			(parser:return (string->symbol (string-downcase val))))))

@

\section{ID Header}%
Uniquely identifies a MIME Entity.

<<Headers>>=
(define-parser mime-parser:id
	(parser:rfc2822-header 'content-id "Content-ID" rfc2822-parser:msg-id))

@

\section{Description Header}%

<<Headers>>=
(define-parser mime-parser:description
	(parser:rfc2822-header 'content-description "Content-Description"
		rfc2822-parser:unstructured))

@

\section{Extensions Fields}%
The RFC for MIME indicates a new extension field production, but this
is really a duplicate of the RFC 2822 unstructured field parser for
all intents and purposes here. Instead of creating a separate parser to
handle these things, we presume that the user of this library will have a
parser to handle the unstructured data returned from the RFC 2822 parser.


\section{Version Header}%
The version header field should return a field with a pair value whose
first element ([[car]]) is the major version, and whose second element
([[cdr]]) is the minor version.

<<Headers>>=
(define-parser mime-parser:version
	(parser:rfc2822-header 'mime-version "MIME-Version"
		(*parser 
				[major (parser:single-bracketed rfc2822-parser:cfws-opt parser:1*digit)]
				[(parser:char= #\.)]
				[minor (parser:single-bracketed rfc2822-parser:cfws-opt parser:1*digit)]
			(parser:return (cons major minor)))))

(define-parser parser:1*digit (parser:string-number:at-least 1))

@

\chapter{MIME Entity Contents}%
Parsing the MIME Entity contents consists of first decoding the data
according to some method (possibly an identify function), followed by
conversion or the proper treatment of that functions output into a data
structure appropriate to the mime type of the entity.

Here, this is accomplished by a parser that examines two databases,
one containing MIME types, and the other containing encoding schemes.
The MIME type database associates mime types with functions going from
a decoded data stream (usually either a string or a bytevector) and
the mime-type parameters into the appropriate form. Encoding Schemes
associate a given scheme with a parser.

<<Exports>>=
mime-parser:contents
@

<<Content Parsing>>=
(define (mime-parser:contents fields)
	(define (grab-field type)
		(let ([res (assq type fields)])
			(and res (cdr res))))
	(let (
			[decode (lookup-mime-decoder (grab-field 'content-transfer-encoding))]
			[convert (lookup-mime-type-converter (grab-field 'content-type))])
		(*parser [res decode]
			(parser:return 
				(convert res 
					(let ([type (grab-field 'content-type)])
						(or (and type (mime-type-parameters type)) '())))))))

@

\section{MIME Types}%
The MIME types database is nested association list. The first level 
identifies the main content type, but the head of this list contains the 
default parser if no MIME type is defined. The second level 
contains a similar pair, where the first element contains the default 
parser for that main type if no subtype is recognized, and the 
second element contains an association list of subtypes to parsers. 

<<Imports>>=
(only (scheme) make-parameter)
@

<<Content Parsing>>=
<<Converters>>

(define mime-type-db
	(make-parameter
		`(,convert-text/plain
			(text ,convert-text/plain 
				(plain . ,convert-text/plain))
			(image ,identity-converter)
			(audio ,identity-converter)
			(video ,identity-converter)
			(application ,identity-converter)
			(multipart ,convert-multipart))))

@

Here are some predefined converters.

<<Imports>>=
(rnrs bytevectors)
@

<<Converters>>=
(define (convert-text/plain data params)
	(cond
		[(string? data) data]
		[(bytevector? data) (bytevector->string data (native-transcoder))]
		[else (error 'convert-text/plain "Unknown data stream type.")]))

(define (identity-converter data params)
	data)
@

\subsection{Handling Multipart bodies}%
Multiparts bodies are more complex than normal converters. They 
basically divide a body (which must come in as either 7bit, 8bit, 
or binary, and use the appropriate characters for the delimiters, 
that is, 7bit ASCII) by the delimiters, and then parse each body 
as its own entity.

<<Imports>>=
(rnrs exceptions)
(rnrs conditions)
(only (scheme) with-output-to-string printf)
@

<<Converters>>=
<<Multipart Parser>>

(define (convert-multipart data params)
	(assert (or (string? data) (bytevector? data)))
	(let (
			[buf 
				(or (and (string? data) data) 
					(bytevector->string data (native-transcoder)))])
		(parse-string (mime-parser:multipart params) buf #f
			(lambda (res con strm) res)
			(lambda (perr con strm)
				(raise
					(condition (make-lexical-violation)
						(make-who-condition 'mime-parser:multipart)
						(make-message-condition "Parse error")
						(make-irritants-condition
							(list (parse-error/position perr) buf))
						(make-message-condition
							(with-output-to-string
								(lambda ()
									(for-each 
										(lambda (x)
											(if (pair? x)
												(printf "~{~a~^ ~}~%" x)
												(printf "~a~%" x)))
										(parse-error/messages perr)))))))))))

@

RFC 2046 Sec. 5.1.1 details a formal BNF grammar for multipart
messages. We follow this general outline, but cheat slightly by permitting
entities to be treated the same as messages, as in the above section.
This is technically incorrect, but simplifies parsing a bit, and shouldn't
matter in real life.

<<Multipart Parser>>=
(define-parser mime-parser:wsp
	(parser:repeated (lambda (y x) x) (parser:return #f)
		(parser:char-in-set (char-set #\space #\tab))))

(define (mime-parser:multipart params)
	(let ([boundary (let ([res (assq 'boundary params)]) (and res (cdr res)))])
		(assert (string? boundary))
		(parser:bracketed
			(mime-parser:preamble boundary)
			(mime-parser:epilogue boundary)
			(*parser
					[first
						(parser:sequence mime-parser:wsp rfc2822-parser:crlf
							(mime-parser:body-part boundary))]
					[rest
						(parser:list:repeated
							(parser:backtrackable
								(parser:sequence
									(mime-parser:delimiter boundary)
									mime-parser:wsp rfc2822-parser:crlf
									(mime-parser:body-part boundary))))]
				(parser:return (cons first rest))))))

@

The formal grammar has a bunch of stuff separated out into different 
targets, but this makes things more difficult to read in the code.
Instead, we just define preamble, epilogue, boundary, and body parsers. 

The [[mime-parser:preamble]] consumes everything except the boundary.

<<Multipart Parser>>=
(define (mime-parser:preamble boundary)
	(parser:repeated-until (parser:backtrackable (mime-parser:boundary boundary))
		(lambda (y x) x) (parser:return #f)
		(parser:char)))

@

The [[mime-parser:epilogue]] grabs the closing delimiter and any text 
that follows it.

<<Multipart Parser>>=
(define (mime-parser:epilogue boundary)
	(parser:sequence
		(mime-parser:delimiter boundary)
		(parser:string= "--")
		mime-parser:wsp
		rfc2822-parser:crlf
		(parser:repeated-until (parser:end)
			(lambda (y x) x) (parser:return #f)
			(parser:char))))

@

The [[mime-parser:delimiter]] just checks for the parsers boundary.

<<Multipart Parser>>=
(define (mime-parser:boundary boundary)
	(parser:sequence (parser:string= "--") (parser:string= boundary)))

(define (mime-parser:delimiter boundary)
	(parser:sequence rfc2822-parser:crlf (mime-parser:boundary boundary)))

@

The [[mime-parser:body-part]] parser should construct the fields, and 
parse the body, passing it to the right entity parser. We have to be 
careful that the parser does not consume a delimiter.

{\it XXX: It would be nice if we did not have to use [[parse-string]] 
to do this.}

<<Multipart Parser>>=
(define (mime-parser:body-part boundary)
	(*parser 
			[buf 
				(parser:string:repeated-until 
					(parser:peek (parser:backtrackable (mime-parser:delimiter boundary)))
					(parser:char))]
		(parser:return
			(parse-string mime-parser:entity buf #f
				(lambda (res c s) res)
				(lambda (err c s)
					(raise
						(condition (make-who-condition 'mime-parser:entity)
							(make-message-condition "Parse error in MIME part")
							(make-irritants-condition (list (parse-error/position err) buf))
							(make-message-condition
								(with-output-to-string
									(lambda ()
										(for-each 
											(lambda (x) 
												(if (pair? x)
													(printf "~{~a~^ ~}~%" x)
													(printf "~a~%" x)))
											(parse-error/messages err))))))))))))

@

\subsection{Registering MIME types}%
Use the following procedure to register new converters.

<<Exports>>=
register-mime-type-converter!
@

<<Imports>>=
(rnrs lists)
(rnrs mutable-pairs)
@

<<Content Parsing>>=
(define (register-mime-type-converter! type subtype converter)
	(let ([db (mime-type-db)])
		(if type
			(let ([res (assq type (cdr db))])
				(if res
					(if subtype
						(let ([subres (assq subtype (cddr res))])
							(if subres
								(set-cdr! subres converter)
								(set-cdr! (cdr res)
									(cons `(,subtype . ,converter) (cddr res)))))
						(set-car! (cdr res) converter))
					(set-cdr! db
						(cons `(,type ,converter (,subtype . ,converter))
							(cdr db)))))
			(set-car! db converter))))

@

\subsection{Retreiving MIME type converters}%
[[lookup-mime-type-converter]] takes a mime-type structure and locates 
the appropriate converter in the mime-type database.

<<Content Parsing>>=
(define (lookup-mime-type-converter mt)
	(or 
		(and mt
			(let ([type (mime-type-main mt)] [subtype (mime-type-subtype mt)])
				(let ([res (and type (assq type (cdr (mime-type-db))))])
					(if res
						(let ([subres (and subtype (assq subtype (cddr res)))])
							(if subres (cdr subres) (cadr res)))
						(car (mime-type-db))))))
		(car (mime-type-db))))

@

\section{MIME Content Decoders}%
It is necessary to use a parser instead of a procedure for the 
Encoding Schemes database because we may not be sure how to grab 
the data out of the parsing stream. For example, a [[binary]] encoding 
may require us to grab the data out directly as a bytevector, whereas 
a base64 encoding may require us to extract the relevant characters 
and ignore things like line breaks, and subsequently decode these using 
a base64 decoder.

<<Content Parsing>>=
<<Decoders>>

(define mime-decoder-db
	(make-parameter
		`((7bit . ,rfc2822-parser:body)
			(8bit . ,rfc2822-parser:body)
			(binary . ,mime-parser:binary)
			(quoted-printable . ,mime-parser:quoted-printable)
			(base64 . ,mime-parser:base64))))

@

Here are the basic decoders.

<<Imports>>=
(arcfide base64)
(rnrs io ports)
(riastradh foof-loop)
(only (scheme) with-input-from-string)
@

<<Decoders>>=
(define-parser mime-parser:quoted-printable
	rfc2822-parser:body)

(define-parser mime-parser:binary
	(parser:sequence rfc2822-parser:crlf
		(parser:string:repeated (parser:char))))

(define-parser mime-parser:base64
	(*parser [body rfc2822-parser:body]
		(let* (
				[cs (char-set-union char-set:letter char-set:digit (char-set #\+ #\- #\=))]
				[s (collect-string (for c (in-string body)) (if (char-set-contains? cs c)) c)])
			(parser:return (base64-decode s)))))

@

\section{Registering MIME Content Decoders}%
The follow procedure allows for registration to the decoder database.

<<Exports>>=
register-mime-decoder!
@

<<Content Parsing>>=
(define (register-mime-decoder! type decoder)
	(let ([res (and type (assq type (mime-decoder-db)))])
		(if res
			(set-cdr! res decoder)
			(mime-decoder-db
				(cons (cons type decoder)
					(mime-decoder-db))))))

@

\section{Retreiving MIME Content Decoders}%
[[lookup-mime-decoder]] takes an encoding value and returns 
the appropriate decoder.

<<Imports>>=
(rnrs control)
@

<<Content Parsing>>=
(define (lookup-mime-decoder encoding)
	(let ([enc (or encoding 'binary)])
		(let ([res (assq enc (mime-decoder-db))])
			(unless res
				(error 'lookup-mime-decoder "Unknown encoding." enc))
			(cdr res))))

@

\chapter{R6RS Form}

<<mime.sls>>=
<<License>>

#!chezscheme
(library (arcfide mime)
	(export
		<<Exports>>)
	(import
		<<Imports>>)

<<Entities>>

<<Convenience Procedures>>

)
@

\chapter{Vanilla File}

<<mime.scm>>=
<<License>>

<<Entities>>

<<Convenience Procedures>>
@

\chapter{Licensing}

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; MIME Parsing 
;;; Version: 1
;;; 
;;; Copyright (c) 2009 Aaron W. Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
@
