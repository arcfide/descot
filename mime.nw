\title{MIME Message Parsing}

\chapter{Introduction}%
MIME messages are mostly compatible with RFC 2822 messages, but they
define new headers and a new means of processing the body. This library is
designed to extend the RFC 2822 parsers defined in [[(arcfide rfc2822)]]
and provide the ability to parse messages that could potentially contain
MIME data.

MIME handling is also convenient for handling things that are
not messages, such as the body of POST HTTP transmissions.  These
transmissions send out a MIME body type of [[multipart/form-data]]
and ought to be parsed by a real MIME parser.

\chapter{Basic Imports}%
These are basic imports that nearly all of the other chapters 
require.

<<Imports>>=
(rnrs base)
(riastradh parscheme)
@

\chapter{Parsing MIME Entities}%
MIME entities are either messages or parts of a composite message. 
They look like regular messages, but may not have the entire 
set of headers that a regular message would have. The parser 
should return a [[mime-entity]].

Generally, a [[mime-entity]] should contain fields like a message,
as well as either a string or a bytevector for the contents. If the
contents fit naturally into a string format, such as textual data, then
strings should be used. If however, the media type of the contents of
an entity are binary or non-textual data, a bytevector should be used.


<<Datatypes>>=
(define-record-type mime-entity (fields fields contents))
@

<<Imports>>=
(arcfide rfc2822)
@

<<Entities>>=
<<Fields>>

<<Contents>>

(define-parser mime-parser:entity
	(*parser 
			[fields mime-parser:fields]
			[contents (mime-parser:contents fields)]
		(parser:return
			(make-mime-entity fields contents))))
@

\chapter{Parsing MIME Fields}%
MIME fields are nearly identifical to RFC2822 fields, except that with a
MIME entity, fields other than "Content-" fields can be entirely ignored,
and may be dropped. This is not true for messages, however, and probably
only occurs in entities that are part of multipart entities.

<<Fields>>=
<<Headers>>

(define-parser mime-parser:fields
	(parser:list:repeated
		(parser:deep-choice
			mime-parser:content
			mime-parser:encoding
			mime-parser:id
			mime-parser:description
			mime-parser:extension-field
			mime-parser:version
			rfc2822-parser:field)))
@

Notice that we simplify the MIME definitions a bit by mixing together
entities, messages, and parts, which the MIME standard (RFC 2045)
distinguishes.

\chapter{MIME Header Definitions}

\section{Content Header}%
Specifies the Content-Type of a MIME entity.

<<Headers>>=
(define-parser mime-parser:content
	(parser:rfc2822-header 'content-type "Content-Type"
		(*parser
				[type (parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:token)]
				[(parser:char= #\/)]
				[subtype (parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:token)]
				[params 
					(parser:list:repeated 
						(parser:sequence (parser:char= #\;) 
							(parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:parameter)))]
			(parser:return (make-mime-type type subtype params)))))

@

Tokens are case-insensitive elements of a MIME type. We achieve this 
by downcasing all strings and converting them to symbols. 

<<Headers>>=
(define-parser mime-parser:token
	(*parser
			[val (parser:string:at-least 1 mime-parser:token-char)]
		(parser:return (string->symbol (string-downcase val)))))

(define-parser mime-parser:token-char
	(parser:char-in-set 
		(char-set-difference char-set:ascii
			char-set:whitespace
			char-set:iso-control
			(char-set 
				#\( #\) #\< #\> #\@ #\, #\; #\: #\\ #\" #\/
				#\[ #\] #\? #\=))))

@

Parameters are tokens followed by a value string separated by an [[=]] 
character.

<<Headers>>=
(define-parser mime-parser:parameter
	(*parser 
			[attr mime-parser:token]
			[(parser:single-bracketed rfc2822-parser:cfws-opt (parser:char= #\=))]
			[val (parser:choice rfc2822-parser:quoted-string mime-parser:token)]
		(parser:return (cons attr val))))

@

\section{Encoding Header}%
Encoding specifies the method of storing the data that is in the entity.

<<Headers>>=
(define-parser mime-parser:encoding
	(parser:rfc2822-header 'content-transfer-encoding "Content-Transfer-Encoding"
		(parser:single-bracketed rfc2822-parser:cfws-opt mime-parser:token)))

@

\section{ID Header}%
Uniquely identifies a MIME Entity.

<<Headers>>=
(define-parser mime-parser:id
	(parser:rfc2822-parser 'content-id "Content-ID" rfc2822-parser:msg-id))

@

\section{Description Header}%

\section{Extensions Fields}%

\section{Version Header}%
The version header field should return a field with a pair value whose
first element ([[car]]) is the major version, and whose second element
([[cdr]]) is the minor version.

<<Headers>>=
(define-parser mime-parser:version
	(parser:rfc2822-header 'mime-version "MIME-Version"
		(*parser 
				[major (parser:single-bracketed rfc2822-parser:cfws-opt parser:1*digit)]
				[(parser:char= #\.)]
				[minor (parser:single-bracketed rfc2822-parser:cfws-opt parser:1*digit)]
			(parser:return (cons major minor)))))

(define-parser parser:1*digit (parser:string-number:at-least 1))

@

